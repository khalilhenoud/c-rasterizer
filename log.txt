Last updated on: Monday June 24 2019.

Tasks section Legend:
+ Signifies a tasks that has already ended.
- Upcoming task.
-+ Task being worked on.
-- Long term task; cannot be applied to sub-task, use deferred syntax for such a case.
-* Deferred task.
-$ Temporary task to be deleted after its done.
@ Single comment.
@ ... @ Block comment, can span several lines.
# Scratch pad.
# ... # Scrath block pad, can span several lines.

Tasks:
+ Copy matrix class from illumination project (without optimization, will be done later).                  
+ Copy pipeline class from the illummination project.                                    
+ Write a triangle rasterizer, a naive triangle rasterizer which can be expanded and optimized later.            
+ Make a small test model (handwritten) and try and see if it is drawn correctly onto the screen.              
+ Axis-angle matrix implementation.                                              
+ Write a camera class. And allow it to freely walk the scene.                                 
+ Implement a graphic hack till we implement homogeneous polygon clipping.                          
+ Polygon clipping in homogeneous space and remove the pixel bound tests in the triangle rasterizer.            
+ Integration between the clipping in homogeneous space and triangle rasterizer.                      
+ Fix bug in the movement code (floating point imprecision).                                
+ Simple optimizations (inline render pixel and buffered blitting to opengl).                        
+ Cleanup code in preparation for next step.                                      
+ Make a general object structure (to be expanded later).                                  
+ Add indices and colors to the object structure in 'object.c'.                                
+ Move createCube into 'object.c' and make it return a pointer to such object.                        
+ Make a general render object function.                                          
+ Install some plugins for visual studio:
  + Editor guideline.
+ Basic fog.
+ Force modification of cursor position system wide should not occur.
+ Tie speed of camera with framerate.
- Refactor:
  -+ Comments are verbose to the point of being stupid.
  -+ Remove c89 block comments when not needed (this is C17 project).
  + OpenGL initialization should be done in main.c (opengl is not a renderer).
  + Move the render object to renderer.c;
  + application.h/.c is not necessary, control should be handed to the user.
  + <windows.h> should exclusively be included in main.c, g_hWnd should be static.
+ Investigate fbx model loading, if useless delete it or leave it for later.
+ Cleanup spacing (in visual studio it shows differently then on git).
- Make the app run in x64.
- Make the rasterizer into a multithreaded system.
- Use simd to speed up calculations.
-- Json parser for config files among others.
-- Implement early z rejection (only possible when lighting computations are added).
-- Implement perspective correct texture mapping.
-- Do the same for color interpolation, which is affine currently.
-- Implement point, bilinear, trilinear and anisotropic filtering.
-- Illumination calculations and light representation (deferred renderer/clustered deferred?).
-- Custom memory allocator.
-- Disentagle the project from visual studio (make file, etc...).
-- Check the interplay between vector and point structs; maybe use a typedef and have one struct.

Scratch:
- loadmodelfromfile("models\\cube.fbx");
- MessageBox(NULL, "Could not register window.", "Error", MB_ICONEXCLAMATION | MB_OK);

Notes:
1- Inlining when it makes sense, huge speed boost.
2- Fixed point arithmetics, also a huge boost (use it in the renderer).
3- Multithreading, decompose the frustum with clip planes and use each thread to render a section (or some other scheme).
4- SIMD assembly instructions for math library, or intrinsic microsoft specific instructions.
5- Minimize variables definitions.
6- github and youtube integration.
